###
###
### DO NOT EDIT THIS VERSION OF THIS FILE. THIS IS JUST THE DEFAULT FILE TEMPLATE. YOU WILL FIND A COPY IN "$ST_CFG/config.cfg". EDIT THAT VERSION INSTEAD.
###
###
## Lines starting with # are Comments, seperator between Entries is TAB (Spaces DO NOT WORK [by design])
## FOR A LIST OF UNDERSTOOD CONFIG OPTIONS CHECK THE TEMPLATE FOR THIS FILE AT $ST_SRC/DEFAULTCONFIG.cfg
## You will see an warning for any non-recognized config option, if you do check the spelling and if it exists in the template file.

## These are Aliases to shorten long git remote strings to a user-selectable text
## The first column is the desired name, the second is whatever the remote must start with (ie put a substring starting at index 0 here the remote neds to match)
## NOTE: these HAVE to include the protocol used eg. git@github.com/someuser will NOT work, ssh://git@github.com/someuser will work
## NOTE: Currently only 32 ORIGIN_ALIAS entries are allowed (there will be a warning if you exceed that)
## You can optionally specify a group by adding a TAB followed by a number to the end of an entry.
## The point of groups is for use with SetGitBase. Only repos that currently have an origin in the same group as the newly requested one will be changed.
## Any ORIGIN_ALIAS without an explicit group will be considered it's own group
## WARNING: Any ORIGIN_ALIAS with group 0 is interpreted as a wildcard group -> it is condidered to be in a group with everything else, even those without a defined group
## ORIGIN_ALIAS definitions must be matched by following regex: ^ORIGIN_ALIAS:\t([^\t]+)\t([^\t]+)(\t(\d+))?$
#ORIGIN_ALIAS:	LOOPBACK	ssh://git@127.0.0.1/data/repos	1
#ORIGIN_ALIAS:	LOCALHOST	ssh://git@localhost/data/repos	1
#ORIGIN_ALIAS:	Example	ssh://git@example.com/git
ORIGIN_ALIAS:	NONE	/dev/null	0

## If you use github-like Services such as GitHub Enterprise or custom GitLab instances, add the "hostname" here.
## NOTE: Currently only 32 GITHUB_HOST entires are allowed (there will be a warning if you exceed that)
## At this point DO NOT include the access protocol as in below examples
GITHUB_HOST:	github.com
GITHUB_HOST:	gitlab.com

## ALL OF THE FOLLOWING OPTIONS ARE TECHNICALLY OPTIONAL. IF THEY ARE OMITTED THE SAME DEFAULT VALUES AS SEEN HERE WILL BE USED AS FALLBACK

## THIS FILE IS HIERACHICAL: for example, if REPOTOOLS.PROMPT.GIT is set to false, ALL of REPOTOOLS.PROMPT.GIT.*whatever* will ALSO be disabled. It does not matter what the individual options are set to.

## Options for the second (short) line in PROMPT
## If the current working directory is shorter than LIMIT_DISPLAY_LENGTH.TARGET, do not attempt to abbreviate the path.
## For the Target Length there are a few special numbers:
##	-1 means 1/2 of your screen
##	-2 means 1/3 of your screen
##	-3 means 1/4 of your screen
##	-4 means 1/6 of your screen
## any other number (even if 0 or negative) will be treated as the desired number of characters
REPOTOOLS.LOWPROMPT.PATH.LIMIT_DISPLAY_LENGTH.ENABLE:	true
REPOTOOLS.LOWPROMPT.PATH.LIMIT_DISPLAY_LENGTH.TARGET:	-3
REPOTOOLS.LOWPROMPT.RETURNCODE.ENABLE:	true
REPOTOOLS.LOWPROMPT.RETURNCODE.DECODE.ENABLE:	true
REPOTOOLS.LOWPROMPT.COMMAND_TIMER.ENABLE:	true

## General Enabled modules for PROMPT (the upper line)
## if REPOTOOLS.PROMPT.ENABLE is set to false, the entire upper line (and everything within) will be disabled
REPOTOOLS.PROMPT.ENABLE:	true
REPOTOOLS.PROMPT.SSHINFO.ENABLE:	true
REPOTOOLS.PROMPT.TERMINALDEVICE.ENABLE:	true
REPOTOOLS.PROMPT.TIME.ENABLE:	true
REPOTOOLS.PROMPT.TIMEZONE.ENABLE:	true
REPOTOOLS.PROMPT.DATE.ENABLE:	true
REPOTOOLS.PROMPT.CALENDARWEEK.ENABLE:	true
REPOTOOLS.PROMPT.PROXYSTATUS.ENABLE:	true
REPOTOOLS.PROMPT.NETWORK.ENABLE:	true
REPOTOOLS.PROMPT.BACKGROUNDJOBS.ENABLE:	true
REPOTOOLS.PROMPT.POWER.ENABLE:	true
REPOTOOLS.PROMPT.GIT.ENABLE:	true
REPOTOOLS.PROMPT.USER.ENABLE:	true
REPOTOOLS.PROMPT.HOST.ENABLE:	true
## Please stick to basic ascii characters (stuff that'll fit in a single C char)
## If you want to use chars that commonly need to be escaped (such as \ $ or %) please beware there may be weird stuff happening. I did my best to accomodate special characters but there may be some I missed
## (ZSH prompt expansion is weird, ZSH prompt expansion escaping is even weirder)
REPOTOOLS.PROMPT.FILLER_CHAR:	'-'

## detailed config for PROMPT (only relevant if the parent is enabled. example: GIT.REMOTE.ENABLE won't do anything if GIT.ENABLE is false)
REPOTOOLS.PROMPT.NETWORK.INTERFACES.DEFAULT.ENABLE:	true
REPOTOOLS.PROMPT.NETWORK.INTERFACES.NONDEFAULT.ENABLE:	true
REPOTOOLS.PROMPT.NETWORK.ROUTINGINFO.ENABLE:	true
REPOTOOLS.PROMPT.NETWORK.LINKSPEED.ENABLE:	true

REPOTOOLS.PROMPT.GIT.WARN_BRANCH_LIMIT:	false
REPOTOOLS.PROMPT.GIT.MAXBRANCHES:	25
REPOTOOLS.PROMPT.GIT.REPOTYPE.ENABLE:	true
REPOTOOLS.PROMPT.GIT.REPOTYPE.PARENT_REPO.ENABLE:	true
REPOTOOLS.PROMPT.GIT.REPONAME.ENABLE:	true
REPOTOOLS.PROMPT.GIT.BRANCH.ENABLE:	true
REPOTOOLS.PROMPT.GIT.BRANCH.OVERVIEW.ENABLE:	true
REPOTOOLS.PROMPT.GIT.BRANCHSTATUS.ENABLE:	true
REPOTOOLS.PROMPT.GIT.REMOTE.ENABLE:	true
REPOTOOLS.PROMPT.GIT.COMMIT_OVERVIEW.ENABLE:	true
REPOTOOLS.PROMPT.GIT.LOCALCHANGES.ENABLE:	true

##Config for lsgit
## for *.MAXBRANCHES -1 means unlimited
REPOTOOLS.LSGIT.WARN_BRANCH_LIMIT:	true
REPOTOOLS.LSGIT.QUICK.MAXBRANCHES:	10
REPOTOOLS.LSGIT.QUICK.REPOTYPE.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.REPOTYPE.PARENT_REPO.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.REPONAME.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.BRANCH.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.BRANCH.OVERVIEW.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.BRANCHSTATUS.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.REMOTE.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.COMMIT_OVERVIEW.ENABLE:	true
REPOTOOLS.LSGIT.QUICK.LOCALCHANGES.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.MAXBRANCHES:	-1
REPOTOOLS.LSGIT.THOROUGH.REPOTYPE.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.REPOTYPE.PARENT_REPO.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.REPONAME.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.BRANCH.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.BRANCH.OVERVIEW.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.BRANCHSTATUS.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.REMOTE.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.COMMIT_OVERVIEW.ENABLE:	true
REPOTOOLS.LSGIT.THOROUGH.LOCALCHANGES.ENABLE:	true

## Notes on performance: [applies per config: LSGIT.THOROUGH is independent from LSGIT.QUICK is independent from PROMPT.GIT]
## if BOTH BRANCH.OVERVIEW.ENABLE AND BRANCHSTATUS.ENABLE are false (or MAXBRANCHES is 0), parsing the branches for the given repo will be skipped (faster)
## if BOTH COMMIT_OVERVIEW.ENABLE and LOCALCHANGES.ENABLE are false, 'git status' needn't be evaluated and will be skipped (potentially much faster; if there are many files, or rather, many changes)
##if BOTH REPONAME.ENABLE AND REMOTE.ENABLE are false, some logic in parsing the repo origin can be skipped (slightly faster)

##for reference here is a generalised example for PROMPT. round brackets () are not actually elements of the prompt, they are just used to indicate that the option contained within also controls the other chars in the bracket
#if a particular segment doesn't have any relevant information it will be dynamically disabled, even if it is allowed in this config file, as soon as information does become available it will be automatically re-enabled
#SSHINFO USER@HOST(:TERMINALDEVICE) [GIT.REPOTYPE(@GIT.REPOTYPE.PARENT_REPO)] GIT.REPONAME (on GIT.BRANCH)(/GIT.BRANCH.OVERVIEW <GIT.BRANCHSTATUS>)(from GIT.REMOTE) {GIT.COMMIT_OVERVIEW} <GIT.LOCALCHANGES>(FILLER_CHARs)TIME TIMEZONE DATE CALENDARWEEK PROXYSTATUS NETWORK.INTERFACES.DEFAULT NETWORK.INTERFACES.NONDEFAULT NETWORK.ROUTINGINFO BACKGROUNDJOBS POWER
#NETWORK.LINKSPEED is part of NETWORK.INTERFACES.DEFAULT and NETWORK.INTERFACES.NONDEFAULT
