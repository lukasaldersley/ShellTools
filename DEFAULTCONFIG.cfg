###
###
### DO NOT EDIT THIS VERSION OF THIS FILE. THIS IS JUST THE DEFAULT FILE TEMPLATE. YOU WILL FIND A FILE DERIVED FROM THIS ONE IN "$ST_CFG/config.cfg". EDIT THAT VERSION INSTEAD.
###
###
## Lines starting with # are Comments, seperator between Entries is TAB (Spaces DO NOT WORK [by design])
## FOR A LIST OF UNDERSTOOD CONFIG OPTIONS CHECK THE TEMPLATE FOR THIS FILE AT $ST_SRC/DEFAULTCONFIG.cfg
## You will see an warning for any non-recognized config option, if you do check the spelling and if it exists in the template file.

## GENERAL INFO
## whenever you are setting a char (such as LOWPROMPT.[START/END]_CHAR or PROMPT.FILLER_CHAR) you can
## either provide a standard ASCII char enclosed in single quotes (such as '-') OR a Unicode Code-point without quotation in the form U+number (such as U+2BB1)
## If you want to use chars that commonly need to be escaped (such as \ $ or %) please beware there may be weird stuff happening. I did my best to accommodate special characters but there may be some I missed
## (ZSH prompt expansion is weird, ZSH prompt expansion escaping is even weirder)

## Notes on performance: [applies per config: LSGIT.THOROUGH is independent from LSGIT.QUICK is independent from PROMPT.GIT]
## if BOTH BRANCH.OVERVIEW.ENABLE AND BRANCHSTATUS.ENABLE are false (or MAXBRANCHES is 0), parsing the branches for the given repo will be skipped (faster)
## if BOTH COMMIT_OVERVIEW.ENABLE and LOCALCHANGES.ENABLE are false, 'git status' needn't be evaluated and will be skipped (potentially much faster; if there are many files, or rather, many changes)
##if BOTH REPONAME.ENABLE AND REMOTE.ENABLE are false, some logic in parsing the repo origin can be skipped (slightly faster)

##for reference here is a generalised example for PROMPT. round brackets () are not actually elements of the prompt, they are just used to indicate that the option contained within also controls the other chars in the bracket
#if a particular segment doesn't have any relevant information it will be dynamically disabled, even if it is allowed in this config file, as soon as information does become available it will be automatically re-enabled
#SSHINFO USER@HOST(:TERMINALDEVICE) [GIT.REPOTYPE(@GIT.REPOTYPE.PARENT_REPO)] GIT.REPONAME (on GIT.BRANCH)(/GIT.BRANCH.OVERVIEW <GIT.BRANCHSTATUS>)(from GIT.REMOTE) {GIT.COMMIT_OVERVIEW} <GIT.LOCALCHANGES>(FILLER_CHARs)TIME TIMEZONE DATE CALENDARWEEK PROXYSTATUS NETWORK.INTERFACES.DEFAULT NETWORK.INTERFACES.NONDEFAULT NETWORK.ROUTINGINFO BACKGROUNDJOBS POWER
#NETWORK.LINKSPEED is part of NETWORK.INTERFACES.DEFAULT and NETWORK.INTERFACES.NONDEFAULT

## The (lower) PROMPT line [the ACTUAL Prompt] has following structure (here the round brackets are actually part of the output, the concept of removing empty areas still is true)
## START_CHAR PATH [COMMAND_TIMER:RETURNCODE (RETURNCODE_DECODE)]

## ALL OF THE FOLLOWING OPTIONS ARE TECHNICALLY OPTIONAL. IF THEY ARE OMITTED THE SAME DEFAULT VALUES AS SEEN HERE WILL BE USED AS FALLBACK

## THIS FILE IS HIERACHICAL: for example, if SHELLTOOLS.PROMPT.GIT is set to false, ALL of SHELLTOOLS.PROMPT.GIT.*whatever* will ALSO be disabled. It does not matter what the individual options are set to.

## These are Aliases to shorten long git remote strings to a user-selectable text
## The first column is the desired name, the second is whatever the remote must start with (ie put a substring starting at index 0 here the remote neds to match)
## NOTE: these HAVE to include the protocol used eg. git@github.com/someuser will NOT work, ssh://git@github.com/someuser will work (or rather it will not work as you'd expect)
## This is required to enable reliable detection of origins and to improve parsing reliability.
## As long as DISABLE_ORIGIN_ALIAS_ERROR_CHECKING is set to false a check will be run when reading this config file to ensure all ORIGIN_ALIAS are in an expected format.
## All origins encountered 'in the wild' are run through the same algorithm before parsing/comparison to these here.
## the real origins on disk are not automatically changed, but to ensure proper parsing these definitions here must march the expected format,
## even if the on-disk origin you are targeting does not
## This is only really a problem if no explicit protocol is provided. The most common case of missing protocols is the URL GitHub provides when you click 'Clone via SSH'
## NOTE: Currently only 32 ORIGIN_ALIAS entries are allowed (there will be a warning if you exceed that)
## You can optionally specify a group by adding a TAB followed by a number to the end of an entry.
## The point of groups is for use with SetGitBase. Only repos that currently have an origin in the same group as the newly requested one will be changed.
## Any ORIGIN_ALIAS without an explicit group will be considered it's own group
## WARNING: Any ORIGIN_ALIAS with group 0 is interpreted as a wildcard group -> it is considered to be in a group with everything else, even those without a defined group
## ORIGIN_ALIAS definitions must be matched by following regex: ^ORIGIN_ALIAS:\t([^\t]+)\t([^\t]+)(\t(\d+))?$
#ORIGIN_ALIAS:	LOOPBACK	ssh://git@127.0.0.1/data/repos	1
#ORIGIN_ALIAS:	LOCALHOST	ssh://git@localhost/data/repos	1
#ORIGIN_ALIAS:	Example	ssh://git@example.com/git
ORIGIN_ALIAS:	NONE	/dev/null	0

DISABLE_ORIGIN_ALIAS_ERROR_CHECKING:	false

## If you use github-like Services such as GitHub Enterprise or custom GitLab instances, add the "hostname" here.
## This enables showing the repo owner instead of just the service
## Example: without any GITHUB_HOST entries ShellTools repo origin (https://github.com/lukasaldersley/ShellTools) would be displayed as https:github.com,
## but if github.com is one of your defined GITHUB_HOST, it would be displayed as https:github.com:lukasaldersley)
## NOTE: Currently only 32 GITHUB_HOST entries are allowed (there will be a warning if you exceed that)
## At this point DO NOT include the access protocol as in below examples.
## This is to avoid the need to define the same host multiple times for different access modes (eg http(s) and ssh)
GITHUB_HOST:	github.com
GITHUB_HOST:	gitlab.com

## You may define directories in which git functionality shall be unavailable.
## in these directories ShellTools will not offer it's git integration
## A usecase may be a weirdly mounted large repo where you do not want to touch the index or to prevent Windows and WSL fighting over a repo
## You can temporarily override this by running 'force-git-enable'. force-git-disable will restore the default state
## if SHELLTOOLS.GIT.AUTO_RESTORE_EXCLUSION is set to true (the default) ShellTools will AUTOMATICALLY reset this back as if 'force-git-disable' had been called after each invocation of ShellTools. (ie after every command)
## in that case force-git-enable effectively acts as a manual single trigger.
## If you haven't defined any GIT_EXCLUSION entries, SHELLTOOLS.GIT.AUTO_RESTORE_EXCLUSION as well as force-git-enable/disable have no effect.
## As with ORIGIN_ALIAS and GITHUB_HOST you can currently define up to 32 GIT_EXCLUSION entries (there will be a warning if you exceed that)
SHELLTOOLS.GIT.AUTO_RESTORE_EXCLUSION:	true
#GIT_EXCLUSION:	/path/to/some/repo

## Options for the second (short) line in PROMPT
## If the current working directory is shorter than LIMIT_DISPLAY_LENGTH.TARGET, do not attempt to abbreviate the path.
## For the Target Length there are a few special numbers:
##	-1 means 1/2 of your screen
##	-2 means 1/3 of your screen
##	-3 means 1/4 of your screen
##	-4 means 1/6 of your screen
## any other number (even if 0 or negative) will be treated as the desired number of characters -> the output will be truncated as much as possible
## Though, at minimum, your current working directory (without it's parents) will always be displayed.
## START_CHAR default (U+2BB1) is ⮱
## Alternatives could be: ⮡(U+2BA1) └(U+2514) ⮩(U+2BA9) ↳(U+21B3)
## END_CHAR default (U+279C) is ➜
SHELLTOOLS.LOWPROMPT.VENV.ENABLE	true
SHELLTOOLS.LOWPROMPT.PATH.LIMIT_DISPLAY_LENGTH.ENABLE:	true
SHELLTOOLS.LOWPROMPT.PATH.LIMIT_DISPLAY_LENGTH.TARGET:	-3
SHELLTOOLS.LOWPROMPT.RETURNCODE.ENABLE:	true
SHELLTOOLS.LOWPROMPT.RETURNCODE.DECODE.ENABLE:	true
SHELLTOOLS.LOWPROMPT.COMMAND_TIMER.ENABLE:	true
SHELLTOOLS.LOWPROMPT.START_CHAR:	U+2BB1
SHELLTOOLS.LOWPROMPT.END_CHAR:	U+279C

## General Enabled modules for PROMPT (the upper line)
## if SHELLTOOLS.PROMPT.ENABLE is set to false, the entire upper line (and everything within) will be disabled
SHELLTOOLS.PROMPT.ENABLE:	true
SHELLTOOLS.PROMPT.SSHINFO.ENABLE:	true
SHELLTOOLS.PROMPT.TERMINALDEVICE.ENABLE:	true
SHELLTOOLS.PROMPT.TIME.ENABLE:	true
SHELLTOOLS.PROMPT.TIMEZONE.ENABLE:	true
SHELLTOOLS.PROMPT.DATE.ENABLE:	true
SHELLTOOLS.PROMPT.CALENDARWEEK.ENABLE:	true
SHELLTOOLS.PROMPT.PROXYSTATUS.ENABLE:	true
SHELLTOOLS.PROMPT.NETWORK.ENABLE:	true
SHELLTOOLS.PROMPT.BACKGROUNDJOBS.ENABLE:	true
SHELLTOOLS.PROMPT.POWER.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.ENABLE:	true
SHELLTOOLS.PROMPT.USER.ENABLE:	true
SHELLTOOLS.PROMPT.HOST.ENABLE:	true
SHELLTOOLS.PROMPT.FILLER_CHAR:	'-'

## detailed config for PROMPT (only relevant if the parent is enabled. example: GIT.REMOTE.ENABLE won't do anything if GIT.ENABLE is false)
SHELLTOOLS.PROMPT.NETWORK.INTERFACES.DEFAULT.ENABLE:	true
SHELLTOOLS.PROMPT.NETWORK.INTERFACES.NONDEFAULT.ENABLE:	true
SHELLTOOLS.PROMPT.NETWORK.ROUTINGINFO.ENABLE:	true
SHELLTOOLS.PROMPT.NETWORK.LINKSPEED.ENABLE:	true

SHELLTOOLS.PROMPT.GIT.WARN_BRANCH_LIMIT:	false
SHELLTOOLS.PROMPT.GIT.MAXBRANCHES:	25
SHELLTOOLS.PROMPT.GIT.REPOTYPE.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.REPOTYPE.PARENT_REPO.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.REPONAME.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.BRANCH.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.BRANCH.OVERVIEW.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.BRANCHSTATUS.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.REMOTE.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.COMMIT_OVERVIEW.ENABLE:	true
SHELLTOOLS.PROMPT.GIT.LOCALCHANGES.ENABLE:	true

##Config for lsgit
## for *.MAXBRANCHES -1 means unlimited
SHELLTOOLS.LSGIT.WARN_BRANCH_LIMIT:	true
SHELLTOOLS.LSGIT.QUICK.MAXBRANCHES:	10
SHELLTOOLS.LSGIT.QUICK.REPOTYPE.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.REPOTYPE.PARENT_REPO.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.REPONAME.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.BRANCH.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.BRANCH.OVERVIEW.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.BRANCHSTATUS.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.REMOTE.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.COMMIT_OVERVIEW.ENABLE:	true
SHELLTOOLS.LSGIT.QUICK.LOCALCHANGES.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.MAXBRANCHES:	-1
SHELLTOOLS.LSGIT.THOROUGH.REPOTYPE.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.REPOTYPE.PARENT_REPO.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.REPONAME.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.BRANCH.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.BRANCH.OVERVIEW.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.BRANCHSTATUS.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.REMOTE.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.COMMIT_OVERVIEW.ENABLE:	true
SHELLTOOLS.LSGIT.THOROUGH.LOCALCHANGES.ENABLE:	true
